// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ocenaocena.Data;

#nullable disable

namespace ocenaocena.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240203031608_tabele2")]
    partial class tabele2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ocenaocena.Models.AktywnoscBadawcza", b =>
                {
                    b.Property<int>("AktywnoscBadawczaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AktywnoscBadawczaId"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DataRozpoczeciaProjektu")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZakonczeniaProjektu")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZawarciaUmowy")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZlozeniaWniosku")
                        .HasColumnType("Date");

                    b.Property<string>("FunkcjaWProjekcie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstytucjaFinansujacaProjekt")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NazwaKonkursu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaLideraProjektu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ProjektWspolrealizowany")
                        .HasColumnType("bit");

                    b.Property<string>("TytulProjektu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZasiegProjektu")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AktywnoscBadawczaId");

                    b.HasIndex("AppUserId");

                    b.ToTable("AktywnoscBadawcza");
                });

            modelBuilder.Entity("ocenaocena.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Information")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ocenaocena.Models.ArtykulNaukowy", b =>
                {
                    b.Property<int>("ArtykulNaukowyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtykulNaukowyId"));

                    b.Property<string>("DOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataKonferencji")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataUdostepnienia")
                        .HasColumnType("Date");

                    b.Property<string>("DyscyplinaNaukowa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicencjaOtwarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiczbaWszystkichAutorow")
                        .HasColumnType("int");

                    b.Property<string>("MiejsceKonferencji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaKonferencji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaPodmiotuUpowaznionego")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumeryStron")
                        .HasColumnType("int");

                    b.Property<string>("PozostaliWspolautorzy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RokOpublikowania")
                        .HasColumnType("int");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SposobUdostepnienia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TomZeszytCzasopisma")
                        .HasColumnType("int");

                    b.Property<string>("TytulArtykuluNaukowego")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TytulCzasopismaNaukowego")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UdostepnienieNastapilo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WersjaTekstuOtwarta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtykulNaukowyId");

                    b.ToTable("ArtykulyNaukowe");
                });

            modelBuilder.Entity("ocenaocena.Models.DzialalnoscOrganizacyjna", b =>
                {
                    b.Property<int>("DzialalnoscOrganizacyjnaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DzialalnoscOrganizacyjnaId"));

                    b.Property<string>("NazwaOrganizacji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TerminPrzynaleznosci")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZasiegOrganizacji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DzialalnoscOrganizacyjnaId");

                    b.ToTable("DzialalnoscWOrganizacjachNaukowych");
                });

            modelBuilder.Entity("ocenaocena.Models.EkspertyzaNaukowa", b =>
                {
                    b.Property<int>("EkspertyzaNaukowaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EkspertyzaNaukowaId"));

                    b.Property<string>("NazwaInstytucjiZlecajacej")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TerminPrzekazania")
                        .HasColumnType("datetime2");

                    b.Property<string>("TytulEkspertyzyOpracowaniaNaukowego")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EkspertyzaNaukowaId");

                    b.ToTable("RealizacjaZleconychEkspertyz");
                });

            modelBuilder.Entity("ocenaocena.Models.KonferencjaNaukowa", b =>
                {
                    b.Property<int>("KonferencjaNaukowaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KonferencjaNaukowaId"));

                    b.Property<DateTime>("DataKonferencji")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiejsceKonferencji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NazwaKonferencji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NazwaOrganizatoraKonferencji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TytulReferatu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZasiegKonferencji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KonferencjaNaukowaId");

                    b.ToTable("CzynnyUdzialWKonferencjach");
                });

            modelBuilder.Entity("ocenaocena.Models.MonografiaNaukowa", b =>
                {
                    b.Property<int>("MonografiaNaukowaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonografiaNaukowaId"));

                    b.Property<string>("DOI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataRozpoczeciaPracy")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataUdostepnieniaMonografii")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZakonczeniaPracy")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZawarciaINumerUmowy")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DataZlozeniaWniosku")
                        .HasColumnType("Date");

                    b.Property<string>("DyscyplinaNaukowaMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DyscyplinaNaukowaRozdzialuMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DyscyplinyNaukowe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunkcjaWProjekcie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstytucjaFinansujacaProjekt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LicencjaOtwarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiczbaWszystkichAutorowMonografii")
                        .HasColumnType("int");

                    b.Property<string>("NazwaKonkursuProgramu")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NazwaLideraProjektu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NazwaPodmiotuUpowaznionegoMonografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazwaPodmiotuUpowaznionegoRozdzial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeryORCIDWspolautorowIRedaktorowMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeryORCIDWspolautorowRozdzialu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PozostaliWspolautorzyIRedaktorzyMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PozostaliWspolautorzyRozdzialu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjektRealizowanyJest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RokWydaniaMonografii")
                        .HasColumnType("int");

                    b.Property<string>("RolaMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SposobUdostepnieniaMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TytulMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TytulProjektu")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TytulRozdzialuMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UdostepnienieNastapilo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WersjaTekstuOtwarta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WydawcaMonografii")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZasiegProjektu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonografiaNaukowaId");

                    b.ToTable("MonografieNaukowe");
                });

            modelBuilder.Entity("ocenaocena.Models.NagrodaWyroznienie", b =>
                {
                    b.Property<int>("NagrodaWyroznienieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NagrodaWyroznienieId"));

                    b.Property<string>("NagrodaMinistraNazwa")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("NagrodaMinistraTerminOtrzymania")
                        .HasColumnType("datetime2");

                    b.Property<string>("NagrodaOrganizacjiNazwa")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("NagrodaOrganizacjiTerminOtrzymania")
                        .HasColumnType("datetime2");

                    b.Property<string>("NagrodaRektoraNazwa")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("NagrodaRektoraTerminOtrzymania")
                        .HasColumnType("datetime2");

                    b.HasKey("NagrodaWyroznienieId");

                    b.ToTable("NagrodyWyroznienia");
                });

            modelBuilder.Entity("ocenaocena.Models.PozostalaDzialalnoscNaukowa", b =>
                {
                    b.Property<int>("PozostalaDzialalnoscNaukowaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PozostalaDzialalnoscNaukowaId"));

                    b.Property<string>("NazwaOrganizacji")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Rola")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("TerminDzialalnosciDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TerminDzialalnosciOd")
                        .HasColumnType("datetime2");

                    b.HasKey("PozostalaDzialalnoscNaukowaId");

                    b.ToTable("PozostaleDzialalnosciNaukowe");
                });

            modelBuilder.Entity("ocenaocena.Models.PozostaleFormyAktywnosci", b =>
                {
                    b.Property<int>("PozostaleFormyAktywnosciId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PozostaleFormyAktywnosciId"));

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("PozostaleFormyAktywnosciId");

                    b.ToTable("PozostaleFormyAktywnosci");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ocenaocena.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ocenaocena.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ocenaocena.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ocenaocena.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ocenaocena.Models.AktywnoscBadawcza", b =>
                {
                    b.HasOne("ocenaocena.Models.AppUser", "User")
                        .WithMany("AktywnosciBadawcze")
                        .HasForeignKey("AppUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ocenaocena.Models.AppUser", b =>
                {
                    b.Navigation("AktywnosciBadawcze");
                });
#pragma warning restore 612, 618
        }
    }
}
